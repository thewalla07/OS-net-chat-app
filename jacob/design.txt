/*
 * Jacob O'Keeffe 13356691
 * Ryan Earley 13301871
 * Sean Quinn 13330146
 * Michael Wall 13522003
 */

 Our solution employs a producer-consumer design where the code to handle sending and receiving information to and from each client is handled by a producer thread and one consumer thread is used to distribute this information between threads. Information (messages) is temporarily stored in a buffer which implements a FIFO algorithm. Our main method handles incoming connections and creates a seperate producer thread for each client and adds this thread to our list of clients.

The MessageBuffer class is essentially a doubly linked lists of nodes where each node contains a message in the form of a string. The fact that our nodes are doubly linked makes it more efficient to remove items. When a message is added to the buffer, all waiting threads are notified. While there are no messages available, a thread will be put to sleep.

Our ClientArray class contains an array of ProducerThreads, the length of which is set using the constructor. The length of the array dictates the max number of clients allowed in the chat room. We felt that using array for this class made sense due to the constant access time.

We made member variables private where possible and had to make a number of methods public so that they could be called from other threads.